#include "YoneticiListesi.hpp"

YoneticiListesi::YoneticiListesi() {
    head = NULL;
    size = 0;
}

YoneticiListesiDugum* YoneticiListesi::FindPrevByPosition(int index) {
    if (index < 0 || index > size)throw "No Such Element";
    YoneticiListesiDugum *prv = head;
    int i = 1;
    for (YoneticiListesiDugum *itr = head; itr->next != NULL && i != index; itr = itr->next, i++) {
        prv = prv->next;
    }
    return prv;
}

YoneticiListesiDugum* YoneticiListesi::FindPosition(int index) {
    if (index < 0 || index >= size) throw "No Such Element";
    return this->FindPrevByPosition(index + 1);

}

SatirListesi*& YoneticiListesi::first(){
    if (isEmpty()) throw "No Such Element";
    return head->item;
}

SatirListesi*& YoneticiListesi::last(){
    if (isEmpty()) throw "No Such Element";
    return FindPrevByPosition(size)->item;
}


int YoneticiListesi::Count()const {
    return size;
}

bool YoneticiListesi::isEmpty()const {
    return size == 0;
}

void YoneticiListesi::add(SatirListesi*& item) {
    insert(size, item);
}

void YoneticiListesi::insert(int index, SatirListesi*& item) {
    if (index < 0 || index > size) throw "Index out of Range";
    if (index == 0) {
        head = new YoneticiListesiDugum(item, head);
        if (head->next != NULL) head->next->prev = head;
    } else {
        YoneticiListesiDugum *prv = FindPrevByPosition(index);
        prv->next = new YoneticiListesiDugum(item, prv->next, prv);
        if (prv->next->next != NULL)
            prv->next->next->prev = prv->next;
    }
    size++;
}



int YoneticiListesi::indexOf(SatirListesi*& item) {
    int index = 0;
    for (YoneticiListesiDugum *itr = head; itr != NULL; itr = itr->next) {
        if (itr->data == item) return index;
        index++;
    }
    throw "No Such Element";
}

void YoneticiListesi::remove(SatirListesi*& item) {
    int index = indexOf(item);
    removeAt(index);
}

void YoneticiListesi::randomRemoveAtSatirListesi(int index, int inlineIndex) {

    int count = this->Count();
    if (index < 0 || index >= count)
        throw "Index out of bounds";

    SatirListesi* satirListesi = this->elementAt(index);

    satirListesi->removeAt(inlineIndex);
    calculateAveragee(index);

}

void YoneticiListesi::calculateAveragee(int index) {
    YoneticiListesiDugum* itr = this->FindPosition(index);

    if (itr == NULL) {

        throw "error";
    }


    double total = 0;
    if (itr->data->isEmpty()) {

        itr->average = total;
        return;
    }


    int count = itr->data->Count();
    for (int i = 0; i < count; ++i) {
        total += itr->data->elementAt(i);
    }
    itr->average = total / count;



}

int YoneticiListesi::generateRandom(int index) {
    int count = this->Count();
    if (index < 0 || index >= count)
        throw"Index out of bounds";

    srand(time(NULL));
    SatirListesi* satirListesi = this->elementAt(index);

    int range = satirListesi->Count();
    if (range == 0) {
        throw "No Such Element";
    }
	
    int inlineIndex = rand() % range;
    return inlineIndex;
}

void YoneticiListesi::removeAt(int index) {
    if (index < 0 || index >= size) throw "Index out of Range";
    YoneticiListesiDugum *del;
    if (index == 0) {
        del = head;
        head = head->next;
        if (head != NULL) head->prev = NULL;
    } else {
        YoneticiListesiDugum *prv = FindPrevByPosition(index);
        del = prv->next;
        prv->next = del->next;
        if (del->next != NULL)
            del->next->prev = prv;
    }
    size--;
    delete del;
}

void YoneticiListesi::moveNode(int from, int to){
    if (from < 0 || from >= size) throw "index out of bound";
    YoneticiListesiDugum *del;
    if (from == 0) {
        del = head;
        head = head->next;
        if (head != NULL) head->prev = NULL;
    } else {
        YoneticiListesiDugum *prv = FindPrevByPosition(from);
        del = prv->next;
        prv->next = del->next;
        if (del->next != NULL)
            del->next->prev = prv;
    }
    size--;
    if (to < 0 || to > size) throw "Index out of Range";
    if (to == 0) {

        del->next = head;
        del->prev = NULL;
        head = del;
        if (head->next != NULL) head->next->prev = head;
    } else {
        YoneticiListesiDugum *prv = FindPrevByPosition(to);

        del->next = prv->next;
        del->prev = prv;
        prv->next = del;
        if (prv->next->next != NULL)
            prv->next->next->prev = prv->next;
    }
    size++;
}

bool YoneticiListesi::find(SatirListesi*& item) {
    for (YoneticiListesiDugum *itr = head; itr != NULL; itr = itr->next) {
        if (itr->data == item) return true;
    }
    return false;
}

void YoneticiListesi::reverse() {
    for (YoneticiListesiDugum *itr = head; itr != NULL;) {
        YoneticiListesiDugum *tmp = itr->next;
        itr->next = itr->prev;
        itr->prev = tmp;
        if (tmp == NULL) {
            head = itr;
            break;
        }
        itr = tmp;
    }
}

void YoneticiListesi::sortByAverage() {
    if (this->size <= 1)
        return;

    for (int step = 0; step < size; ++step) {


        for (int i = 0; i < size - step - 1; ++i) {
            YoneticiListesiDugum *tmp = this->FindPosition(i);
            YoneticiListesiDugum *tmp2 = tmp->next;

            if (tmp->average > tmp2->average) {


                this->moveNode(i + 1, i);
            }
        }
    }

}

SatirListesi*& YoneticiListesi::elementAt(int index) {
    if (index < 0 || index >= size) throw "No Such Element";
    if (index == 0) return head->data;
    return FindPrevByPosition(index)->next->data;
}

void YoneticiListesi::clear() {
    while (!isEmpty())
        removeAt(0);
}